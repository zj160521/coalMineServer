<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.1.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task-3.1.xsd ">


	<context:annotation-config />
	
	<context:component-scan base-package="com.cm.dao" />
	<context:component-scan base-package="com.cm.service" />
	<context:component-scan base-package="com.cm.security" />
	<context:component-scan base-package="com.cm.controller" />
	
	<bean class="com.cm.security.SpringContextHolder" lazy-init="false" />
	
	<task:annotation-driven scheduler="myScheduler"/> 
	<task:scheduler id="myScheduler" pool-size="5"/>

    <!--配置mysql数据源 -->
    <context:property-placeholder location="file:/etc/mineserver.cfg" ignore-unresolvable="true"/>
	 <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean> -->

  <!-- 配置数据源 -->
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
    <!-- 基本属性 url、user、password --> 
    <property name="driverClassName" value="${jdbc.driverClassName}" />
	<property name="url" value="${jdbc.url}" />
	<property name="username" value="${jdbc.username}" />
	<property name="password" value="${jdbc.password}" />
    <property name="initialSize" value="1" /> 
    <property name="minIdle" value="1" />  
    <property name="maxActive" value="40" /> 
    <property name="maxWait" value="60000" />
    <!-- 超过时间限制是否回收 -->
    <property name="removeAbandoned" value="true" />
    <!-- 超过时间限制多长； -->
    <property name="removeAbandonedTimeout" value="180" />
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000" />
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="30000" />
    <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
    <!-- <property name="validationQuery" value="SELECT 1" />-->
    <!-- 申请连接的时候检测 -->
    <property name="testWhileIdle" value="true" />
    <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
    <property name="testOnBorrow" value="false" />
    <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
    <property name="testOnReturn" value="false" />
  </bean>
	<bean id="loadReSource" class="com.cm.controller.HostInit" init-method="initialized"></bean>
    <!-- myBatis文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>

        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置,并且可以扫描实体中的别名注解 -->
        <property name="typeAliasesPackage" value="com.cm.entity"/>

        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="mapperLocations" value="classpath:com/cm/dao/**/*.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cm.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    
    <!-- 配置事务管理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
</beans>
